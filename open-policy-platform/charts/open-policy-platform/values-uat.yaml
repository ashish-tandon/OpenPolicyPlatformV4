# ========================================
# QNAP/UAT ENVIRONMENT VALUES
# ========================================
# This file overrides default values for QNAP/UAT environment
# Mirrors production configuration but with lower resource limits

global:
  environment: "uat"
  imageRegistry: "ghcr.io"
  domain: "uat.openpolicy.local"
  adminDomain: "uat.openpolicyadmin.local"

# UAT environment - moderate resources
infrastructure:
  postgres:
    persistence:
      size: 20Gi
    resources:
      requests:
        memory: 512Mi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 2000m
  
  postgresTest:
    persistence:
      size: 10Gi
    resources:
      requests:
        memory: 512Mi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 2000m
  
  redis:
    persistence:
      size: 5Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  elasticsearch:
    persistence:
      size: 50Gi
    resources:
      requests:
        memory: 2Gi
        cpu: 1000m
      limits:
        memory: 8Gi
        cpu: 4000m
  
  logstash:
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 2000m
  
  kibana:
    resources:
      requests:
        memory: 512Mi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 2000m
  
  prometheus:
    persistence:
      size: 10Gi
    resources:
      requests:
        memory: 512Mi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 2000m
  
  grafana:
    persistence:
      size: 5Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  fluentd:
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m

# UAT environment - moderate replicas
microservices:
  apiGateway:
    replicaCount: 2
    service:
      type: LoadBalancer
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  configService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  authService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  policyService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  notificationService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  analyticsService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  monitoringService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  etlService:
    replicaCount: 2
    resources:
      requests:
        memory: 512Mi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 2000m
  
  scraperService:
    replicaCount: 3
    resources:
      requests:
        memory: 512Mi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 2000m
  
  searchService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  dashboardService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  filesService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  reportingService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  workflowService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  integrationService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  dataManagementService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  representativesService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  plotlyService:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  mobileApi:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  legacyDjango:
    replicaCount: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m
  
  web:
    replicaCount: 2
    service:
      type: LoadBalancer
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m

# UAT environment - enable ingress
microservices.apiGateway.ingress.enabled = true
microservices.web.ingress.enabled = true

# UAT environment - production-like monitoring
monitoring:
  healthChecks:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbes:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  
  livenessProbes:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

# UAT environment - enable HPA
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# UAT environment - production security
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# UAT environment - blue-green deployment enabled
deployment:
  blueGreen:
    enabled: true
    autoSwitch: false
    switchAfter: 600  # 10 minutes
    rollbackOnFailure: true
  
  canary:
    enabled: false

# UAT environment - network policies
networkPolicy:
  enabled: true
  ingressRules:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
  egressRules:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53

# UAT environment - pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
