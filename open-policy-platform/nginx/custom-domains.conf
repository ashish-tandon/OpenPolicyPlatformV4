# OpenPolicyPlatform Custom Domains Configuration
# This configuration handles OpenPolicy.local and OpenPolicyAdmin.local

upstream api_backend {
    server api-gateway:9000;
    keepalive 32;
}

upstream auth_backend {
    server auth-service:9002;
    keepalive 32;
}

upstream policy_backend {
    server policy-service:9003;
    keepalive 32;
}

upstream dashboard_backend {
    server dashboard-service:9010;
    keepalive 32;
}

upstream web_frontend {
    server web:3000;
    keepalive 32;
}

upstream admin_frontend {
    server admin-dashboard:3001;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=web:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=admin:10m rate=5r/s;

# Main OpenPolicy.local configuration
server {
    listen 80;
    server_name openpolicy.local;

    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Main site health check
    location /health {
        access_log off;
        return 200 "OpenPolicy Platform - Healthy\n";
        add_header Content-Type text/plain;
    }

    # API Gateway routing
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://api_backend/;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Auth service direct access
    location /auth/ {
        limit_req zone=api burst=10 nodelay;
        proxy_pass http://auth_backend/;
        include /etc/nginx/proxy_params;
    }

    # Policy service direct access
    location /policy/ {
        limit_req zone=api burst=10 nodelay;
        proxy_pass http://policy_backend/;
        include /etc/nginx/proxy_params;
    }

    # Dashboard API
    location /dashboard/ {
        limit_req zone=api burst=10 nodelay;
        proxy_pass http://dashboard_backend/;
        include /etc/nginx/proxy_params;
    }

    # Main web application
    location / {
        limit_req zone=web burst=50 nodelay;
        
        proxy_pass http://web_frontend;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://web_frontend;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Error pages
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /403.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# Admin dashboard configuration - OpenPolicyAdmin.local
server {
    listen 80;
    server_name openpolicyadmin.local;

    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'";

    # Admin health check
    location /health {
        access_log off;
        return 200 "OpenPolicy Admin - Healthy\n";
        add_header Content-Type text/plain;
    }

    # API access for admin
    location /api/ {
        limit_req zone=admin burst=10 nodelay;
        
        proxy_pass http://api_backend/;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Admin-Request "true";
        
        # Stricter CORS for admin
        add_header 'Access-Control-Allow-Origin' 'http://openpolicyadmin.local' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Admin dashboard
    location / {
        limit_req zone=admin burst=20 nodelay;
        
        proxy_pass http://admin_frontend/;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Admin static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://admin_frontend;
        expires 30d;
        add_header Cache-Control "public, must-revalidate";
        access_log off;
    }

    # Monitoring endpoints (admin only)
    location /monitoring/ {
        proxy_pass http://grafana:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /kibana/ {
        proxy_pass http://kibana:5601/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Error pages
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /403.html {
        return 403 "Access Denied - Admin authentication required";
        add_header Content-Type text/plain;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# Default server to handle unknown hosts
server {
    listen 80 default_server;
    server_name _;
    
    return 444; # Close connection without response
}