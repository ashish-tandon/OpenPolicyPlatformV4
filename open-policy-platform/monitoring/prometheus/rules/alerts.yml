# Open Policy Platform V4 - Prometheus Alerting Rules
# Comprehensive alerting for all platform components

groups:
  # Service Availability Alerts
  - name: service-availability
    rules:
      # Service Down Alert
      - alert: ServiceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
          category: availability
        annotations:
          summary: "Service {{ $labels.job }} is down"
          description: "Service {{ $labels.job }} has been down for more than 1 minute"
          impact: "Service unavailable, potential data loss"
          action: "Check service logs and restart if necessary"

      # Service Unhealthy Alert
      - alert: ServiceUnhealthy
        expr: up == 1 and (health_status{job=~".*"} != 1)
        for: 2m
        labels:
          severity: warning
          category: availability
        annotations:
          summary: "Service {{ $labels.job }} is unhealthy"
          description: "Service {{ $labels.job }} is running but health checks are failing"
          impact: "Service may be experiencing issues"
          action: "Investigate service health and logs"

  # Performance Alerts
  - name: performance-monitoring
    rules:
      # High Response Time Alert
      - alert: HighResponseTime
        expr: http_request_duration_seconds{quantile="0.95"} > 2
        for: 5m
        labels:
          severity: warning
          category: performance
        annotations:
          summary: "High response time for {{ $labels.job }}"
          description: "95th percentile response time is {{ $value }}s (threshold: 2s)"
          impact: "User experience degradation"
          action: "Check for performance bottlenecks"

      # High Error Rate Alert
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 2m
        labels:
          severity: critical
          category: performance
        annotations:
          summary: "High error rate for {{ $labels.job }}"
          description: "Error rate is {{ $value | humanizePercentage }} (threshold: 5%)"
          impact: "Service reliability issues"
          action: "Investigate error logs and fix issues"

  # Resource Usage Alerts
  - name: resource-usage
    rules:
      # High CPU Usage Alert
      - alert: HighCPUUsage
        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
        for: 5m
        labels:
          severity: warning
          category: resources
        annotations:
          summary: "High CPU usage on {{ $labels.instance }}"
          description: "CPU usage is {{ $value | humanizePercentage }} (threshold: 80%)"
          impact: "Performance degradation"
          action: "Check for resource-intensive processes"

      # High Memory Usage Alert
      - alert: HighMemoryUsage
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85
        for: 5m
        labels:
          severity: warning
          category: resources
        annotations:
          summary: "High memory usage on {{ $labels.instance }}"
          description: "Memory usage is {{ $value | humanizePercentage }} (threshold: 85%)"
          impact: "Potential out-of-memory errors"
          action: "Check memory usage and consider scaling"

      # High Disk Usage Alert
      - alert: HighDiskUsage
        expr: (node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes * 100 > 90
        for: 5m
        labels:
          severity: warning
          category: resources
        annotations:
          summary: "High disk usage on {{ $labels.instance }}"
          description: "Disk usage is {{ $value | humanizePercentage }} (threshold: 90%)"
          impact: "Potential disk space issues"
          action: "Clean up old files and consider scaling storage"

  # Database Alerts
  - name: database-monitoring
    rules:
      # Database Connection Alert
      - alert: HighDatabaseConnections
        expr: pg_stat_database_numbackends > 80
        for: 2m
        labels:
          severity: warning
          category: database
        annotations:
          summary: "High database connections"
          description: "Database has {{ $value }} active connections (threshold: 80)"
          impact: "Potential connection pool exhaustion"
          action: "Check for connection leaks and optimize queries"

      # Slow Query Alert
      - alert: SlowQueries
        expr: rate(pg_stat_activity_max_tx_duration[5m]) > 30
        for: 2m
        labels:
          severity: warning
          category: database
        annotations:
          summary: "Slow database queries detected"
          description: "Average transaction duration is {{ $value }}s (threshold: 30s)"
          impact: "Database performance degradation"
          action: "Optimize slow queries and check indexes"

  # Cache Alerts
  - name: cache-monitoring
    rules:
      # Redis Memory Alert
      - alert: RedisHighMemory
        expr: redis_memory_used_bytes / redis_memory_max_bytes * 100 > 80
        for: 2m
        labels:
          severity: warning
          category: cache
        annotations:
          summary: "High Redis memory usage"
          description: "Redis memory usage is {{ $value | humanizePercentage }} (threshold: 80%)"
          impact: "Potential cache eviction and performance issues"
          action: "Check cache patterns and consider scaling"

      # Redis Connection Alert
      - alert: RedisHighConnections
        expr: redis_connected_clients > 100
        for: 2m
        labels:
          severity: warning
          category: cache
        annotations:
          summary: "High Redis connections"
          description: "Redis has {{ $value }} connected clients (threshold: 100)"
          impact: "Potential connection pool issues"
          action: "Check for connection leaks"

  # API Specific Alerts
  - name: api-monitoring
    rules:
      # API High Latency Alert
      - alert: APIHighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="openpolicy-api"}[5m])) > 1
        for: 3m
        labels:
          severity: warning
          category: api
        annotations:
          summary: "API high latency detected"
          description: "95th percentile API response time is {{ $value }}s (threshold: 1s)"
          impact: "API performance degradation"
          action: "Check API performance and optimize endpoints"

      # API High Throughput Alert
      - alert: APIHighThroughput
        expr: rate(http_requests_total{job="openpolicy-api"}[5m]) > 1000
        for: 2m
        labels:
          severity: info
          category: api
        annotations:
          summary: "High API throughput"
          description: "API is handling {{ $value }} requests/second (threshold: 1000)"
          impact: "High load on API services"
          action: "Monitor performance and consider scaling"

  # Container Alerts
  - name: container-monitoring
    rules:
      # Container Restart Alert
      - alert: ContainerRestart
        expr: increase(container_start_time_seconds[1h]) > 0
        for: 1m
        labels:
          severity: warning
          category: containers
        annotations:
          summary: "Container restarted: {{ $labels.name }}"
          description: "Container {{ $labels.name }} has restarted in the last hour"
          impact: "Service interruption"
          action: "Check container logs for restart reason"

      # Container High Memory Alert
      - alert: ContainerHighMemory
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes * 100) > 80
        for: 5m
        labels:
          severity: warning
          category: containers
        annotations:
          summary: "High container memory usage: {{ $labels.name }}"
          description: "Container {{ $labels.name }} memory usage is {{ $value | humanizePercentage }} (threshold: 80%)"
          impact: "Potential container crashes"
          action: "Check memory usage and consider resource limits"

  # Business Logic Alerts
  - name: business-metrics
    rules:
      # User Registration Alert
      - alert: HighUserRegistration
        expr: increase(user_registrations_total[1h]) > 100
        for: 1m
        labels:
          severity: info
          category: business
        annotations:
          summary: "High user registration rate"
          description: "{{ $value }} users registered in the last hour (threshold: 100)"
          impact: "High platform adoption"
          action: "Monitor system capacity and performance"

      # Failed Login Alert
      - alert: HighFailedLogins
        expr: rate(failed_login_attempts_total[5m]) > 10
        for: 2m
        labels:
          severity: warning
          category: security
        annotations:
          summary: "High failed login attempts"
          description: "{{ $value }} failed logins per second (threshold: 10)"
          impact: "Potential security threat"
          action: "Investigate for brute force attacks"
